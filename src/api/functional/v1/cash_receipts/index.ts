/**
 * @packageDocumentation
 * @module api.functional.v1.cash_receipts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher, Primitive } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

import type { ITossCashReceipt } from "./../../../structures/ITossCashReceipt";

/**
 * 현금 영수증 발행하기.
 * 
 * @param input 입력 정보
 * @returns 현금 영수증 정보
 * 
 * @author Jeongho Nam - https://github.com/samchon
 * 
 * @controller FakeTossCashReceiptsController.store()
 * @path POST /v1/cash-receipts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function store
    (
        connection: IConnection,
        input: Primitive<store.Input>
    ): Promise<store.Output>
{
    return Fetcher.fetch
    (
        connection,
        store.ENCRYPTED,
        store.METHOD,
        store.path(),
        input
    );
}
export namespace store
{
    export type Input = Primitive<ITossCashReceipt.IStore>;
    export type Output = Primitive<ITossCashReceipt>;

    export const METHOD = "POST" as const;
    export const PATH: string = "/v1/cash-receipts";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/v1/cash-receipts`;
    }
}

/**
 * 현금 영수증 취소하기.
 * 
 * @param receiptKey 현금 영수증의 {@link ITossCashReceipt.receiptKey}
 * @param input 취소 입력 정보
 * @returns 취소된 현금 영수증 정보
 * 
 * @author Jeongho Nam - https://github.com/samchon
 * 
 * @controller FakeTossCashReceiptsController.cancel()
 * @path POST /v1/cash-receipts/:receiptKey/cancel
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function cancel
    (
        connection: IConnection,
        receiptKey: string,
        input: Primitive<cancel.Input>
    ): Promise<cancel.Output>
{
    return Fetcher.fetch
    (
        connection,
        cancel.ENCRYPTED,
        cancel.METHOD,
        cancel.path(receiptKey),
        input
    );
}
export namespace cancel
{
    export type Input = Primitive<ITossCashReceipt.ICancel>;
    export type Output = Primitive<ITossCashReceipt>;

    export const METHOD = "POST" as const;
    export const PATH: string = "/v1/cash-receipts/:receiptKey/cancel";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(receiptKey: string): string
    {
        return `/v1/cash-receipts/${encodeURIComponent(receiptKey ?? "null")}/cancel`;
    }
}